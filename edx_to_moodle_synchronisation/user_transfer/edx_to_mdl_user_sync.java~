import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
/////////////////////////////////
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
/////////////////////////////////



public class edx_to_mdl_user_sync {
	
	// JDBC driver name and database URL
	   static final String JDBC_DRIVER = "com.mysql.jdbc.Driver";  
	   static final String DB_URL_mdl = "jdbc:mysql://localhost/moodle";

	   //  Database credentials
	   static final String USER = "root";
	   static final String PASS = "root";
	   
	   public static void main(String[] args) throws ClassNotFoundException{
		      Class.forName("com.mysql.jdbc.Driver");
	
		   // load the sqlite-JDBC driver using the current class loader   
		   Class.forName("org.sqlite.JDBC");
		   Connection conn_edx = null;   
		//   Connection conn_edx1 = null;
		   Connection conn_mdl = null;
		   Connection conn_mdl1 = null;
	   Statement stmt = null;
	   try{
	      //STEP 2: Register JDBC driver
	      Class.forName("com.mysql.jdbc.Driver");

	      //STEP 3: Open a connection
	     
	   
	   ///////////////////////////////////////////////////////////////////////////////
	
	    

	    
	    try
	    {
	      // create a database connection
	      conn_edx = DriverManager.getConnection("jdbc:sqlite:/home/sogeking/edx_all/db/edx.db");
	      Statement statement = conn_edx.createStatement();
	      statement.setQueryTimeout(30);  // set timeout to 30 sec.

	      //ResultSet rs = statement.executeQuery("select * from auth_user");
	      ResultSet rs1 = statement.executeQuery("select * from auth_user where id = (select max(id) from auth_user) ");
	      while(rs1.next())
	      {
	      // read the result set
	    	
	    	
	        String username = rs1.getString("username");
	    //  String first = rs.getString("first_name");
	     // String last = rs.getString("last_name");
	        String email = rs1.getString("email");
	        System.out.println("Username = " + username);
	      //String password = BCrypt.hashpw("gaurav$7", BCrypt.gensalt());
	        String password = "$2y$10$p11/5aZ3y6yf1YnfArefNOrEHm1qqYz9nxfcBqx6tkVbIfBY9gp7K";
	         		//;
	    ///////////////////////////////////////////
	        
	    ///////////////////////////////////////////     
	         
	        conn_mdl1 = DriverManager.getConnection(DB_URL_mdl,USER,PASS);
	        stmt = conn_mdl1.createStatement();
		      String sql1;
		      int flag=-39;
		      //sql1 = "INSERT into (id,auth,confirmed,policyagreed,deleted,suspended,mnethostid,username,password,idnumber,firstname,lastname,email,emailstop,icq,skype,yahoo,aim,msn,phone1,phone2,institution,department,address,city,country,lang,theme,timezone,firstaccess,lastaccess,lastlogin,currentlogin,lastip,secret,picture,url,description,descriptionformat,mailformat,maildigest,maildisplay,htmleditor,autosubscribe,trackforums,timecreated,timemodified,trustbitmask,imagealt) values("+id+",'pango','1','0','0','0','1','"+username+"','$2y$10$YWumsPFxZoe.NzqvBHtVP.NAmvibzbwXs4OLXoOMBnyEWi2NfAQNi','','"+first+"','"+last+"','"+email+"','0','','','','','','','','','','','Ranchi','IN','en','','5.5','1401979979','1401986211','1401982772','1401986211','127.0.0.1','','0','','','1','1','0','1','1','1','0','0','1401980044','0','NULL')";
		     // sql1 = "insert into moodle.mdl_user(mnethostid,username,confirmed,password,firstname,lastname,email,city,country) values (1,'"+username+"',1,'"+password+"','naruto','uzumaki','"+email+"','MTRT','IN')";
		      ResultSet rs2 = stmt.executeQuery("select * from moodle.mdl_user");
		      while(rs2.next())
		      {
		    	  String tst_email = rs2.getString("email");
		    	  if(tst_email.equals(email))
		    		  {
		    		  flag=1001;
		    		  }
		    		  
		    	  System.out.println("hi"+flag);
		      }
		      
		      if(flag != 1001)
		      {
		      sql1 = "insert into moodle.mdl_user(confirmed,mnethostid,username,password,firstname,lastname,email,city,country) values (1,1,'"+username+"','"+password+"','naruto','uzumaki','"+email+"','cityname','countryname')";

		      System.out.println(sql1);
		      //ResultSet rs = stmt.executeQuery(sql1);
	          stmt.executeUpdate(sql1);
	          conn_mdl1.close();
	          stmt.close();
		      }
		      else
		      {
		    	  
		    	  System.out.println("\n user already exists");
		      }
	    
	    
	      
	    
	      }
	    }
	    catch(SQLException e)
	    {
	      // if the error message is "out of memory", it probably means no database file is found
	      System.err.println(e.getMessage());
	    }
	    finally
	    {
	      try
	      {
	        if(conn_edx != null)
	          conn_edx.close();
	      }
	      catch(SQLException e)
	      {
	        // connection close failed.
	        System.err.println(e);
	      }
	    }
	   
	    System.out.println("Connecting to database...");
	      conn_mdl = DriverManager.getConnection(DB_URL_mdl,USER,PASS);

	      //STEP 4: Execute a query
	      System.out.println("Creating statement...");
	      stmt = conn_mdl.createStatement();
	      String sql;
	      sql = "SELECT * FROM mdl_user";
	      ResultSet rs = stmt.executeQuery(sql);

	      //STEP 5: Extract data from result set
	      while(rs.next()){
	         //Retrieve by column name
	         int id  = rs.getInt("id");
	         //int age = rs.getInt("age");
	         String auth = rs.getString("auth");
	         String first = rs.getString("firstname");
	         String last = rs.getString("lastname");
	         String email = rs.getString("email");
	         String city = rs.getString("city");
	         String country = rs.getString("country");
	         String username = rs.getString("username");

	         //Display values
	         System.out.print("ID: " + id);
	         //System.out.print(", Age: " + age);
	         System.out.println(", Author: " + auth);
	         System.out.println(", First name: " + first);
	         System.out.println(", Last name: " + last);
	         System.out.println(", email: " + email);
	         System.out.println(", city: " + city);
	         System.out.println(", country: " + country);
	         System.out.println(", username: " + username);
	//////////////////////////////////////////////////////////////////////
/*	         conn_edx1 = DriverManager.getConnection("jdbc:sqlite:/home/gaurav/edx_all/db/edx.db");
		      Statement statement = conn_edx1.createStatement();
		      statement.setQueryTimeout(30);  // set timeout to 30 sec.

		      //ResultSet rs1 = statement.executeQuery("select  *  from auth_user");
		      //while(rs1.next())
		      //{
		        // read the result set
		        String sql1 = "insert into auth_user(id,username,first_name,last_name,email)"+"values("+id+","+username+","+first+","+last+","+email+")"; 
		        statement.executeUpdate(sql1);
		      //}
		      conn_edx1.close();
	*/	      
	/////////////////////////////////////////////////////////////////////////	      
	         
	      }
	      //STEP 6: Clean-up environment
	      rs.close();
	      stmt.close();
	      conn_mdl.close();
	   }catch(SQLException se){
	      //Handle errors for JDBC
	      se.printStackTrace();
	   }catch(Exception e){
	      //Handle errors for Class.forName
	      e.printStackTrace();
	   }finally{
	      //finally block used to close resources
	      try{
	         if(stmt!=null)
	            stmt.close();
	      }catch(SQLException se2){
	      }// nothing we can do
	      try{
	         if(conn_mdl!=null)
	            conn_mdl.close();
	      }catch(SQLException se){
	         se.printStackTrace();
	      }//end finally try
	   }//end try
	   System.out.println("Goodbye!");
	   
	   
	   
	   }
	  /* static String sha1(String input) throws NoSuchAlgorithmException {
           MessageDigest mDigest = MessageDigest.getInstance("SHA1");
           byte[] result = mDigest.digest(input.getBytes());
           StringBuffer sb = new StringBuffer();
           for (int i = 0; i < result.length; i++) {
               sb.append(Integer.toString((result[i] & 0xff) + 0x100, 16).substring(1));
           }
            
           return sb.toString();*/
       

}
